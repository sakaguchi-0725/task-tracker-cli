// Code generated by MockGen. DO NOT EDIT.
// Source: create_task.go
//
// Generated by this command:
//
//	mockgen -source=create_task.go -destination=../../mock/usecase/input/mock_create_task.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	input "github.com/sakaguchi-0725/task-tracker/internal/usecase/input"
	output "github.com/sakaguchi-0725/task-tracker/internal/usecase/output"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateTaskInputPort is a mock of CreateTaskInputPort interface.
type MockCreateTaskInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTaskInputPortMockRecorder
	isgomock struct{}
}

// MockCreateTaskInputPortMockRecorder is the mock recorder for MockCreateTaskInputPort.
type MockCreateTaskInputPortMockRecorder struct {
	mock *MockCreateTaskInputPort
}

// NewMockCreateTaskInputPort creates a new mock instance.
func NewMockCreateTaskInputPort(ctrl *gomock.Controller) *MockCreateTaskInputPort {
	mock := &MockCreateTaskInputPort{ctrl: ctrl}
	mock.recorder = &MockCreateTaskInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTaskInputPort) EXPECT() *MockCreateTaskInputPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateTaskInputPort) Execute(input input.CreateTaskInput, output output.CreateTaskOutputPort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", input, output)
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateTaskInputPortMockRecorder) Execute(input, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateTaskInputPort)(nil).Execute), input, output)
}
