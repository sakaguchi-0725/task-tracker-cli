// Code generated by MockGen. DO NOT EDIT.
// Source: get_task_list.go
//
// Generated by this command:
//
//	mockgen -source=get_task_list.go -destination=../../mock/usecase/input/mock_get_task_list.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	output "github.com/sakaguchi-0725/task-tracker/internal/usecase/output"
	gomock "go.uber.org/mock/gomock"
)

// MockGetTaskListInputPort is a mock of GetTaskListInputPort interface.
type MockGetTaskListInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockGetTaskListInputPortMockRecorder
	isgomock struct{}
}

// MockGetTaskListInputPortMockRecorder is the mock recorder for MockGetTaskListInputPort.
type MockGetTaskListInputPortMockRecorder struct {
	mock *MockGetTaskListInputPort
}

// NewMockGetTaskListInputPort creates a new mock instance.
func NewMockGetTaskListInputPort(ctrl *gomock.Controller) *MockGetTaskListInputPort {
	mock := &MockGetTaskListInputPort{ctrl: ctrl}
	mock.recorder = &MockGetTaskListInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTaskListInputPort) EXPECT() *MockGetTaskListInputPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTaskListInputPort) Execute(output output.GetTaskListOutputPort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", output)
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTaskListInputPortMockRecorder) Execute(output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTaskListInputPort)(nil).Execute), output)
}
