// Code generated by MockGen. DO NOT EDIT.
// Source: update_task.go
//
// Generated by this command:
//
//	mockgen -source=update_task.go -destination=../../mock/usecase/input/mock_update_task.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	input "github.com/sakaguchi-0725/task-tracker/internal/usecase/input"
	output "github.com/sakaguchi-0725/task-tracker/internal/usecase/output"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateTaskInputPort is a mock of UpdateTaskInputPort interface.
type MockUpdateTaskInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateTaskInputPortMockRecorder
	isgomock struct{}
}

// MockUpdateTaskInputPortMockRecorder is the mock recorder for MockUpdateTaskInputPort.
type MockUpdateTaskInputPortMockRecorder struct {
	mock *MockUpdateTaskInputPort
}

// NewMockUpdateTaskInputPort creates a new mock instance.
func NewMockUpdateTaskInputPort(ctrl *gomock.Controller) *MockUpdateTaskInputPort {
	mock := &MockUpdateTaskInputPort{ctrl: ctrl}
	mock.recorder = &MockUpdateTaskInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateTaskInputPort) EXPECT() *MockUpdateTaskInputPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateTaskInputPort) Execute(input input.UpdateTaskInput, output output.UpdateTaskOutputPort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", input, output)
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateTaskInputPortMockRecorder) Execute(input, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateTaskInputPort)(nil).Execute), input, output)
}
