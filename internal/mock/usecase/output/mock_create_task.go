// Code generated by MockGen. DO NOT EDIT.
// Source: create_task.go
//
// Generated by this command:
//
//	mockgen -source=create_task.go -destination=../../mock/usecase/output/mock_create_task.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateTaskOutputPort is a mock of CreateTaskOutputPort interface.
type MockCreateTaskOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTaskOutputPortMockRecorder
	isgomock struct{}
}

// MockCreateTaskOutputPortMockRecorder is the mock recorder for MockCreateTaskOutputPort.
type MockCreateTaskOutputPortMockRecorder struct {
	mock *MockCreateTaskOutputPort
}

// NewMockCreateTaskOutputPort creates a new mock instance.
func NewMockCreateTaskOutputPort(ctrl *gomock.Controller) *MockCreateTaskOutputPort {
	mock := &MockCreateTaskOutputPort{ctrl: ctrl}
	mock.recorder = &MockCreateTaskOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTaskOutputPort) EXPECT() *MockCreateTaskOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockCreateTaskOutputPort) Render() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render")
}

// Render indicates an expected call of Render.
func (mr *MockCreateTaskOutputPortMockRecorder) Render() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockCreateTaskOutputPort)(nil).Render))
}

// RenderError mocks base method.
func (m *MockCreateTaskOutputPort) RenderError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", err)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockCreateTaskOutputPortMockRecorder) RenderError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockCreateTaskOutputPort)(nil).RenderError), err)
}
