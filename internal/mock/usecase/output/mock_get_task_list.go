// Code generated by MockGen. DO NOT EDIT.
// Source: get_task_list.go
//
// Generated by this command:
//
//	mockgen -source=get_task_list.go -destination=../../mock/usecase/output/mock_get_task_list.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	output "github.com/sakaguchi-0725/task-tracker/internal/usecase/output"
	gomock "go.uber.org/mock/gomock"
)

// MockGetTaskListOutputPort is a mock of GetTaskListOutputPort interface.
type MockGetTaskListOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockGetTaskListOutputPortMockRecorder
	isgomock struct{}
}

// MockGetTaskListOutputPortMockRecorder is the mock recorder for MockGetTaskListOutputPort.
type MockGetTaskListOutputPortMockRecorder struct {
	mock *MockGetTaskListOutputPort
}

// NewMockGetTaskListOutputPort creates a new mock instance.
func NewMockGetTaskListOutputPort(ctrl *gomock.Controller) *MockGetTaskListOutputPort {
	mock := &MockGetTaskListOutputPort{ctrl: ctrl}
	mock.recorder = &MockGetTaskListOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTaskListOutputPort) EXPECT() *MockGetTaskListOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockGetTaskListOutputPort) Render(arg0 []output.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0)
}

// Render indicates an expected call of Render.
func (mr *MockGetTaskListOutputPortMockRecorder) Render(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockGetTaskListOutputPort)(nil).Render), arg0)
}

// RenderError mocks base method.
func (m *MockGetTaskListOutputPort) RenderError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", err)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockGetTaskListOutputPortMockRecorder) RenderError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockGetTaskListOutputPort)(nil).RenderError), err)
}
